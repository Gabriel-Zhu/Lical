const TCMap = require('../../libs/qqmap-wx-jssdk.min')
const tcMapSDK = new TCMap({
  key: '3P4BZ-QOBWD-GO24H-PJCB5-J4TOH-XGFI4',
})

const app = getApp()

const getInitialCards = () => [
  {
    type: 'sleep',
    icon: 'üò¥',
    name: 'Áù°Áú†',
    tips: [
      {
        type: 'warn',
        content: 'Âª∫ËÆÆ 23 ÁÇπ‰πãÂâçÂÖ•Áù°',
      },
      {
        type: 'warn',
        content: 'Âª∫ËÆÆ 9 ÁÇπ‰πãÂâçËµ∑Â∫ä',
      },
      {
        type: 'warn',
        content: 'Âª∫ËÆÆÂ§úÈó¥Áù°ËßâÊó∂ÈïøÊª° 8 Â∞èÊó∂',
      },
      {
        type: 'warn',
        content: 'Áù°ËßâÊó∂Èïø‰∏çË∂≥ 10 ÂàÜÈíüÊàñËÄÖË∂ÖËøá 12 Â∞èÊó∂Â∞ÜË¢´Ê†áËÆ∞‰∏∫Êó†ÊïàËÆ∞ÂΩï',
      },
    ],
    button: {
      action: 'start',
      name: 'ÂºÄÂßãÁù°Áú†',
      disabled: true,
    },
  },
  {
    type: 'exercise',
    icon: 'üèÉ',
    name: 'ËøêÂä®',
    tips: [
      {
        type: 'warn',
        content: 'Âª∫ËÆÆÊôö‰∏ä 9 ÁÇπ‰πãÂâçÂºÄÂßãËøêÂä®',
      },
      {
        type: 'warn',
        content: 'Âª∫ËÆÆ‰∏ÄÊ¨°ËøêÂä®Êó∂ÈïøÊª° 45 ÂàÜÈíü',
      },
      {
        type: 'warn',
        content: 'ËøêÂä®Êó∂Èïø‰∏çË∂≥ 10 ÂàÜÈíüÊàñËÄÖË∂ÖËøá 3 Â∞èÊó∂Â∞ÜË¢´Ê†áËÆ∞‰∏∫Êó†ÊïàËÆ∞ÂΩï',
      },
    ],
    button: {
      action: 'start',
      name: 'ÂºÄÂßãËøêÂä®',
      disabled: true,
    },
  },
  {
    type: 'travel',
    icon: '‚úàÔ∏è',
    name: 'ÊóÖË°å',
    tips: [
      {
        type: 'warn',
        content: 'ÂèëÁé∞Êõ¥Â§ßÁöÑ‰∏ñÁïå',
      },
    ],
    button: {
      name: 'Á≠æÂà∞',
      disabled: true,
    },
  },
]

Page({
  data: {
    isInitializingCard: false,
    cards: [],
    position: null,
  },

  onLoad() {
    this.getPosition()
  },

  onShow() {
    this.initilizePage()
  },

  initilizePage: function() {
    app.initializeApp()

    const { licalUserInfo } = app.globalData

    this.setData({ cards: getInitialCards() })

    this.getCards()
  },

  post: function (type, action) {
    this.setData({ cards: getInitialCards() })

    const db = wx.cloud.database()
    const { licalUserInfo: { lical_id } } = app.globalData

    this.addActivity({
      type,
      action,
      lical_id,
      created_at: new Date().getTime(),
      position: this.data.position,
    })
  },

  addTravelActivity: function(position) {
    this.addActivity({
      type: 'travel',
      lical_id: app.globalData.licalUserInfo.lical_id,
      created_at: new Date().getTime(),
      position,
    })
  },


  addActivity: function(body) {
    wx.showLoading({
      title: 'Ê≠£Âú®ÂèëÂ∏É',
    })

    wx.cloud.callFunction({
      name: 'addActivity',
      data: {
        body,
      },
      success: () => {
        wx.hideLoading({
          success: () => {
            wx.showToast({
              icon: 'success',
              title: 'ÂèëÂ∏ÉÊàêÂäüÔºÅ',
              success: () => {
                const pages = getCurrentPages()
                const prevPage = pages[pages.length - 2]

                wx.navigateBack({
                  delta: 1,
                })

                prevPage.getActivityList(true)
              },
            })
          },
        })
      },
      fail: () => {
        wx.showToast({ title: 'ÂèëÂ∏ÉÂ§±Ë¥•' })
      },
    })
  },

  getPosition() {
    wx.showLoading({
      title: 'Ê≠£Âú®Ëé∑ÂèñÂÆö‰Ωç',
    })
    return new Promise((resolve, reject) => {
      tcMapSDK.reverseGeocoder({
        poi_options: 'policy=4;page_size=1;page_index=1',
        get_poi: '1',
        success: res => {
          wx.hideLoading()
          this.setData({
            position: res && res.result
              && res.result.pois
              && res.result.pois[0]
              || null,
          })
        },
        fail: reject,
      })
    })
  },

  handlePostionTap: function() {
    wx.navigateTo({
      url: '/pages/locate/locate?callback=setPosition',
    })
  },

  setPosition: function(position) {
    this.setData({ position })
  },

  onGetLastActivity: function () {
    return new Promise((resolve, reject) => {
      wx.cloud.callFunction({
        name: 'getLastActivity',
        success: resolve,
        fail: reject,
      })
    })
  },

  getCards: function() {
    this.setData({ isInitializingCard: true })
    this.onGetLastActivity().then(res => {
      this.setData({ isInitializingCard: false })
      this.getPostButtons(res.result)
    })
  },

  getPostButtons: function (lastActivity) {
    const postButtons = []
    const { type: lastType, action: lastAction, is_afternoon } = lastActivity

    const { isInitializingCard, position } = this.data

    this.setData({
      cards: getInitialCards().map(card => ({
        ...card,
        button: {
          action: card.type === lastType && lastAction === 'start'
            ? 'end'
            : card.button.action,
          name: card.type === lastType && lastAction === 'start'
            ? `ÁªìÊùü${card.name}`
            : card.button.name,
          disabled: isInitializingCard
            || card.type !== lastType && lastAction === 'start'
            || card.type === 'travel' && (!position || !position.id),
        },
      })),
    })
  },

  handlePostButtonTap: function (event) {
    const { type, action } = event.currentTarget.dataset
    this.post(type, action)
  },
})